from threading import Thread
from threading import Semaphore
from threading import Lock
from threading import Condition
import time
import datetime
import random
import threading

fzona = open("Zona_Comun.txt","w")
fmontana = open("Montana_rusa.txt","w")
fcasa = open("Casa_Terror.txt","w")
fcarrusel = open("Carrusel.txt","w")
fbarco = open("Barco_Pirata.txt","w")


NTHREAD = 10
tiemponow = datetime.datetime.now() #para luego hacer los txt pedidos con el tiempo corresondiente
tiempo = str(tiemponow)[11:]
semFilaMontana = Semaphore(10)
semJuegoMontana = Semaphore(10)
semFilaCasa = Semaphore(8)
semFilaCasaAux = Semaphore(2)
semFilaCarrusel = Semaphore(15)
semFilaCarAux = Semaphore(5)
semFilaBarco = Semaphore(6)
semFilaBarAux = Semaphore(3)
cv1 = Condition()
cv2 = Condition()
cv3 = Condition()
cv4 = Condition()
cv4a = Condition()
cv5 = Condition()
cv6 = Condition()
cv7 = Condition()
cv8 = Condition()
Lock = Lock() #Se crea la variable lock

filazonacomun = 0
contMontana = 0
filaMontana = 0
filaCasa = 0
contCasa = 0
filaCarrusel = 0
contCarrusel = 0
filaBarco = 0
contBarco = 0

dispMontana = True
dispCasa = True
dispCarrusel = True
dispBarco = True

print(tiempo)

def MontanaRusa(contador):
    global filaMontana
    global dispMontana
    global contMontana
    tiempoa = ""
    
    with cv1:
        tiempoantes = datetime.datetime.now() 
        tiempoa = str(tiempoantes)[11:]  #Almaceno tiempo

        while (filaMontana < 10):   #Mientras la fila sea menor a 10, personas esperan en la fila

            #if (filazonacomun == 0 and contMontana == 0): Esta parte era para cuando se acaben los jugadores y tengan que entrar noma, pero no funca
            #    filaMontana = 10
            #    print("waos")
            #   break

            cv1.wait()  #Pausa el proceso
        
        if (filaMontana == 10):  #Existen 10 en la fila
            dispMontana = False  #Pauso las entradas a la fila
            cv1.notify() #Notifico al while previo que se puede continuar
            Lock.acquire()
            time.sleep(0.9)
            Lock.release()
            tiempodesp = datetime.datetime.now()
            tiempod = str(tiempodesp)[11:]  #Almaceno tiempo

            Lock.acquire()
            string = threading.current_thread().name + "," + tiempoa + "," + tiempod + "," + str(contador) + "\n"
            fmontana.write(string) #Creo string y lo almaceno en txt
            Lock.release()
        
            return
    

def CasaTerror(contador):
    global filaCasa
    global dispCasa
    global contCasa
    tiempoa = ""
    tiempoantes = datetime.datetime.now()
    tiempoa = str(tiempoantes)[11:]
    while (filaCasa == 8):  #Si la fila es de 8 personas, se bloquea entrada de mas gente, creo que esto ta malo XD
        dispCasa = False
        with cv4:
            cv4.wait()  #Pauso procesos


    if (contCasa <= 2):  # Si hay 2 o menos personas en la fila puede entrar al juego
        semFilaCasaAux.acquire()  #Agarro semaforo con limite de 2 personas
        contCasa += 1  #Contador de cuantas personas estan en el Juego
        print("Ingresa al juego")
        filaCasa -= 1  #Resto personas a la fila
        tiempodesp = datetime.datetime.now()
        tiempod = str(tiempodesp)[11:]
        while (contCasa != 2):
            if (filaCasa == 0 and filazonacomun == 0): #Si no hay nadie mas esperando
                contCasa = 2
                break
            with cv4a:
                cv4a.wait()

        
        if (contCasa == 2):  #Si hay 2 personas se continua
            Lock.acquire()
            time.sleep(2.5)  #Se duerme el tiempo que dura el juego, si no se usa esto el proceso no funciona muere
            Lock.release()
            with cv4a:
                cv4a.notify() #Notifico a la persona esperando que puede ingresar
            with cv4:
                cv4.notify() #Notifico a la fila que se puede continuar con mas gente
            Lock.acquire()
            string = threading.current_thread().name + "," + tiempoa + "," + tiempod + "," + str(contador) + "\n"
            fcasa.write(string) #Creo string para ingresar a txt
            Lock.release()
            return
        

def Carrusel():
    return 1
def BarcoPirata():
    return 1
    


def ZonaComun():
    contador = 0
    while (contador < 1):
        global filazonacomun
        global filaMontana
        global filaCasa
        global filaCarrusel
        global filaBarco
        global dispMontana
        global dispCasa
        global dispCarrusel
        global dispBarco
        global contMontana
        global contCasa
        global contCarrusel
        global contBarco
        Juegos = ["Montaña Rusa"]  #Lista de juegos

        Lock.acquire()
        filazonacomun += 1
        Lock.release()
        
        #Se eligen os dos juegos aleatoriamente de la persona o hebra (sin que se repita el mismo juego)
        JuegoAleatorio1 = random.choice(Juegos)
        
        Juegos2 = Juegos
        Juegos2.remove(JuegoAleatorio1)
        
        if(JuegoAleatorio1 == "Montaña Rusa"):

            while (dispMontana == False and contMontana != 0): #Si no hay espacio en la fila, espero hasta poder entrar
                with cv2:
                    cv2.wait()
                

            if (dispMontana == True): #Si hay espacio en la fila, agarro semaforo y entro
                semFilaMontana.acquire()
                Lock.acquire()
                contador += 1 #Contador de juegos
                contMontana += 1 #Cont gente para el juego
                filaMontana += 1 #Cont gente en la fila
                filazonacomun -= 1
                Lock.release()
                MontanaRusa(contador)
                Lock.acquire()
                contMontana -= 1 #Se baja una persona del juego
                Lock.release()

                if (contMontana == 0): #Si no quedan mas personas, solo entra el ultimo jugador
                    dispMontana = True #Se permite entrada de gente a la fila
                    filaMontana = 0 #Se resetea fila
                    print(threading.current_thread().name)
                    print("Termina monta;a rusa")

                    with cv2:
                        cv2.notify_all() #Despauso entrada de gente
                    semFilaMontana.release() #Libero recursos del semaforo
                
                while (contMontana != 0): #Otros jugadores
                    with cv2:
                        cv2.wait()  #Esperan hasta que el ultimo jugador se baje
                    semFilaMontana.release() #Liberan recursos

                
            
        elif(JuegoAleatorio1 == "Casa de Terror"):
            
            while (dispCasa == False): #Si no hay espacio en la fila, esperan
                with cv3:
                    cv3.wait()
                

            if (dispCasa == True):
                semFilaCasa.acquire() #Agarra puesto en la fila
                contador += 1
                Lock.acquire()
                filaCasa += 1
                filazonacomun -= 1
                Lock.release()
                CasaTerror(contador)
                
                Lock.acquire()
                contCasa -= 1 #Se baja persona del juego
                Lock.release()
                
                if (contCasa == 0): #Si no quedan mas jugadores en la fila
                    with cv3:
                        cv3.notify_all() #Libero fila por si esta bloqueada
                    print("Termina ejecucion de casa")
                    dispCasa = True 
                    semFilaCasaAux.release() #Libero recursos de semaforos
                    semFilaCasa.release()
                
                while (contCasa == 1):
                    with cv3:
                        cv3.wait()
                    semFilaCasa.release()
                    semFilaCasaAux.release()
                
                    
            
        elif(JuegoAleatorio1 == "Carrusel"): 

                return
            
        elif(JuegoAleatorio1 == "Barco Pirata"):
            
            if(filaBarco < 6):
                filaBarco += 1
                filazonacomun -= 1
                BarcoPirata()
            
     

i = 0
while(i < NTHREAD):
    
    #Se crea la hebra
    NPERSONA ='Persona' + str(i+1)
    threading.Thread(name=NPERSONA, target=ZonaComun, args=( )).start()
    
    i+=1
    
    
    
